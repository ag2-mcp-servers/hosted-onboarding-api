# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:03:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class CollectInformation(BaseModel):
    bankDetails: Optional[bool] = Field(
        None,
        description='Indicates whether [bank account details](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/bank-account-check) must be collected. Default is **true**.',
    )
    businessDetails: Optional[bool] = Field(
        None,
        description='Indicates whether [business details](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/company-check) must be collected. Default is **true**.',
    )
    individualDetails: Optional[bool] = Field(
        None,
        description='Indicates whether [individual details](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/identity-check) must be collected. Default is **true**.',
    )
    legalArrangementDetails: Optional[bool] = Field(
        None,
        description='Indicates whether [legal arrangement details](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/legal-arrangements) must be collected. Default is **true**.',
    )
    pciQuestionnaire: Optional[bool] = Field(
        None,
        description='Indicates whether answers to a [PCI questionnaire](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#onboard-partner-platform) must be collected. Applies only to partner platforms. Default is **true**.',
    )
    shareholderDetails: Optional[bool] = Field(
        None,
        description='Indicates whether [shareholder details](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/identity-check) must be collected. Defaults to **true**.',
    )


class FieldName(Enum):
    accountCode = 'accountCode'
    accountHolderCode = 'accountHolderCode'
    accountHolderDetails = 'accountHolderDetails'
    accountNumber = 'accountNumber'
    accountStateType = 'accountStateType'
    accountStatus = 'accountStatus'
    accountType = 'accountType'
    address = 'address'
    balanceAccount = 'balanceAccount'
    balanceAccountActive = 'balanceAccountActive'
    balanceAccountCode = 'balanceAccountCode'
    balanceAccountId = 'balanceAccountId'
    bankAccount = 'bankAccount'
    bankAccountCode = 'bankAccountCode'
    bankAccountName = 'bankAccountName'
    bankAccountUUID = 'bankAccountUUID'
    bankBicSwift = 'bankBicSwift'
    bankCity = 'bankCity'
    bankCode = 'bankCode'
    bankName = 'bankName'
    bankStatement = 'bankStatement'
    branchCode = 'branchCode'
    businessContact = 'businessContact'
    cardToken = 'cardToken'
    checkCode = 'checkCode'
    city = 'city'
    companyRegistration = 'companyRegistration'
    constitutionalDocument = 'constitutionalDocument'
    controller = 'controller'
    country = 'country'
    countryCode = 'countryCode'
    currency = 'currency'
    currencyCode = 'currencyCode'
    dateOfBirth = 'dateOfBirth'
    description = 'description'
    destinationAccountCode = 'destinationAccountCode'
    document = 'document'
    documentContent = 'documentContent'
    documentExpirationDate = 'documentExpirationDate'
    documentIssuerCountry = 'documentIssuerCountry'
    documentIssuerState = 'documentIssuerState'
    documentName = 'documentName'
    documentNumber = 'documentNumber'
    documentType = 'documentType'
    doingBusinessAs = 'doingBusinessAs'
    drivingLicence = 'drivingLicence'
    drivingLicenceBack = 'drivingLicenceBack'
    drivingLicenceFront = 'drivingLicenceFront'
    drivingLicense = 'drivingLicense'
    email = 'email'
    firstName = 'firstName'
    formType = 'formType'
    fullPhoneNumber = 'fullPhoneNumber'
    gender = 'gender'
    hopWebserviceUser = 'hopWebserviceUser'
    houseNumberOrName = 'houseNumberOrName'
    iban = 'iban'
    idCard = 'idCard'
    idCardBack = 'idCardBack'
    idCardFront = 'idCardFront'
    idNumber = 'idNumber'
    identityDocument = 'identityDocument'
    individualDetails = 'individualDetails'
    infix = 'infix'
    jobTitle = 'jobTitle'
    lastName = 'lastName'
    lastReviewDate = 'lastReviewDate'
    legalArrangement = 'legalArrangement'
    legalArrangementCode = 'legalArrangementCode'
    legalArrangementEntity = 'legalArrangementEntity'
    legalArrangementEntityCode = 'legalArrangementEntityCode'
    legalArrangementLegalForm = 'legalArrangementLegalForm'
    legalArrangementMember = 'legalArrangementMember'
    legalArrangementMembers = 'legalArrangementMembers'
    legalArrangementName = 'legalArrangementName'
    legalArrangementReference = 'legalArrangementReference'
    legalArrangementRegistrationNumber = 'legalArrangementRegistrationNumber'
    legalArrangementTaxNumber = 'legalArrangementTaxNumber'
    legalArrangementType = 'legalArrangementType'
    legalBusinessName = 'legalBusinessName'
    legalEntity = 'legalEntity'
    legalEntityType = 'legalEntityType'
    logo = 'logo'
    merchantAccount = 'merchantAccount'
    merchantCategoryCode = 'merchantCategoryCode'
    merchantHouseNumber = 'merchantHouseNumber'
    merchantReference = 'merchantReference'
    microDeposit = 'microDeposit'
    name = 'name'
    nationality = 'nationality'
    originalReference = 'originalReference'
    ownerCity = 'ownerCity'
    ownerCountryCode = 'ownerCountryCode'
    ownerDateOfBirth = 'ownerDateOfBirth'
    ownerHouseNumberOrName = 'ownerHouseNumberOrName'
    ownerName = 'ownerName'
    ownerPostalCode = 'ownerPostalCode'
    ownerState = 'ownerState'
    ownerStreet = 'ownerStreet'
    passport = 'passport'
    passportNumber = 'passportNumber'
    payoutMethodCode = 'payoutMethodCode'
    payoutSchedule = 'payoutSchedule'
    pciSelfAssessment = 'pciSelfAssessment'
    personalData = 'personalData'
    phoneCountryCode = 'phoneCountryCode'
    phoneNumber = 'phoneNumber'
    postalCode = 'postalCode'
    primaryCurrency = 'primaryCurrency'
    reason = 'reason'
    registrationNumber = 'registrationNumber'
    returnUrl = 'returnUrl'
    schedule = 'schedule'
    shareholder = 'shareholder'
    shareholderCode = 'shareholderCode'
    shareholderCodeAndSignatoryCode = 'shareholderCodeAndSignatoryCode'
    shareholderCodeOrSignatoryCode = 'shareholderCodeOrSignatoryCode'
    shareholderType = 'shareholderType'
    shareholderTypes = 'shareholderTypes'
    shopperInteraction = 'shopperInteraction'
    signatory = 'signatory'
    signatoryCode = 'signatoryCode'
    socialSecurityNumber = 'socialSecurityNumber'
    sourceAccountCode = 'sourceAccountCode'
    splitAccount = 'splitAccount'
    splitConfigurationUUID = 'splitConfigurationUUID'
    splitCurrency = 'splitCurrency'
    splitValue = 'splitValue'
    splits = 'splits'
    stateOrProvince = 'stateOrProvince'
    status = 'status'
    stockExchange = 'stockExchange'
    stockNumber = 'stockNumber'
    stockTicker = 'stockTicker'
    store = 'store'
    storeDetail = 'storeDetail'
    storeName = 'storeName'
    storeReference = 'storeReference'
    street = 'street'
    taxId = 'taxId'
    tier = 'tier'
    tierNumber = 'tierNumber'
    transferCode = 'transferCode'
    ultimateParentCompany = 'ultimateParentCompany'
    ultimateParentCompanyAddressDetails = 'ultimateParentCompanyAddressDetails'
    ultimateParentCompanyAddressDetailsCountry = (
        'ultimateParentCompanyAddressDetailsCountry'
    )
    ultimateParentCompanyBusinessDetails = 'ultimateParentCompanyBusinessDetails'
    ultimateParentCompanyBusinessDetailsLegalBusinessName = (
        'ultimateParentCompanyBusinessDetailsLegalBusinessName'
    )
    ultimateParentCompanyBusinessDetailsRegistrationNumber = (
        'ultimateParentCompanyBusinessDetailsRegistrationNumber'
    )
    ultimateParentCompanyCode = 'ultimateParentCompanyCode'
    ultimateParentCompanyStockExchange = 'ultimateParentCompanyStockExchange'
    ultimateParentCompanyStockNumber = 'ultimateParentCompanyStockNumber'
    ultimateParentCompanyStockNumberOrStockTicker = (
        'ultimateParentCompanyStockNumberOrStockTicker'
    )
    ultimateParentCompanyStockTicker = 'ultimateParentCompanyStockTicker'
    unknown = 'unknown'
    value = 'value'
    verificationType = 'verificationType'
    virtualAccount = 'virtualAccount'
    visaNumber = 'visaNumber'
    webAddress = 'webAddress'
    year = 'year'


class FieldType(BaseModel):
    field: Optional[str] = Field(None, description='The full name of the property.')
    fieldName: Optional[FieldName] = Field(None, description='The type of the field.')
    shareholderCode: Optional[str] = Field(
        None,
        description='The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.',
    )


class GetPciUrlRequest(BaseModel):
    accountHolderCode: str = Field(
        ...,
        description='The account holder code you provided when you created the account holder.',
    )
    returnUrl: Optional[str] = Field(
        None,
        description='The URL where the account holder will be redirected back to after they fill out the questionnaire, or if their session times out. Maximum length of 500 characters.',
    )


class ServiceError(BaseModel):
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class ShowPages(BaseModel):
    bankDetailsSummaryPage: Optional[bool] = Field(
        None,
        description='Indicates whether the page with bank account details must be shown. Defaults to **true**.',
    )
    bankVerificationPage: Optional[bool] = Field(
        None,
        description="Indicates whether the bank check instant verification' details must be shown. Defaults to **true**.",
    )
    businessDetailsSummaryPage: Optional[bool] = Field(
        None,
        description="Indicates whether the page with the company's or organization's details must be shown. Defaults to **true**.",
    )
    checksOverviewPage: Optional[bool] = Field(
        None,
        description='Indicates whether the checks overview page must be shown. Defaults to **false**.',
    )
    individualDetailsSummaryPage: Optional[bool] = Field(
        None,
        description="Indicates whether the page with the individual's details must be shown. Defaults to **true**.",
    )
    legalArrangementsDetailsSummaryPage: Optional[bool] = Field(
        None,
        description="Indicates whether the page with the legal arrangements' details must be shown. Defaults to **true**.",
    )
    manualBankAccountPage: Optional[bool] = Field(
        None,
        description="Indicates whether the page to manually add bank account' details must be shown. Defaults to **true**.",
    )
    shareholderDetailsSummaryPage: Optional[bool] = Field(
        None,
        description="Indicates whether the page with the shareholders' details must be shown. Defaults to **true**.",
    )
    welcomePage: Optional[bool] = Field(
        None,
        description='Indicates whether the welcome page must be shown. Defaults to **false**.',
    )


class ErrorFieldType(BaseModel):
    errorCode: Optional[int] = Field(None, description='The validation error code.')
    errorDescription: Optional[str] = Field(
        None, description='A description of the validation error.'
    )
    fieldType: Optional[FieldType] = Field(None, description='The type of error field.')


class GetOnboardingUrlRequest(BaseModel):
    accountHolderCode: str = Field(
        ...,
        description='The account holder code you provided when you created the account holder.',
    )
    collectInformation: Optional[CollectInformation] = Field(
        None,
        description='Contains indicators whether the page should only collect information for specific [KYC checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks). By default, the page collects information for all KYC checks that apply to the [legal entity type](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#legal-entity-types).',
    )
    editMode: Optional[bool] = Field(
        None,
        description='Indicates if editing checks is allowed even if all the checks have passed.',
    )
    mobileOAuthCallbackUrl: Optional[str] = Field(
        None,
        description='The URL to which the account holder is redirected after completing an OAuth authentication with a bank through Trustly/PayMyBank.',
    )
    platformName: Optional[str] = Field(
        None, description='The platform name which will show up in the welcome page.'
    )
    returnUrl: Optional[str] = Field(
        None,
        description="The URL where the account holder will be redirected back to after they complete the onboarding, or if their session times out. Maximum length of 500 characters. If you don't provide this, the account holder will be redirected back to the default return URL configured in your platform account.",
    )
    shopperLocale: Optional[str] = Field(
        None,
        description='The language to be used in the page, specified by a combination of a language and country code. For example, **pt-BR**. \n\nIf not specified in the request or if the language is not supported, the page uses the browser language. If the browser language is not supported, the page uses **en-US** by default.\n\nFor a list of supported languages, refer to [Change the page language](https://docs.adyen.com/marketplaces-and-platforms/classic/hosted-onboarding-page/customize-experience#change-page-language).',
    )
    showPages: Optional[ShowPages] = Field(
        None,
        description='Contains indicators whether specific pages must be shown to the account holder.',
    )


class GetOnboardingUrlResponse(BaseModel):
    invalidFields: Optional[List[ErrorFieldType]] = Field(
        None, description='Information about any invalid fields.'
    )
    pspReference: Optional[str] = Field(
        None,
        description='The reference of a request. Can be used to uniquely identify the request.',
    )
    redirectUrl: Optional[str] = Field(
        None,
        description='The URL to the Hosted Onboarding Page where you should redirect your sub-merchant. This URL must be used within 30 seconds and can only be used once.',
    )
    resultCode: Optional[str] = Field(None, description='The result code.')


class GetPciUrlResponse(BaseModel):
    invalidFields: Optional[List[ErrorFieldType]] = Field(
        None, description='Information about any invalid fields.'
    )
    pspReference: Optional[str] = Field(
        None,
        description='The reference of a request. Can be used to uniquely identify the request.',
    )
    redirectUrl: Optional[str] = Field(
        None,
        description='The URL to the PCI compliance questionnaire where you should redirect your account holder. This URL must be used within 30 seconds and can only be used once.',
    )
    resultCode: Optional[str] = Field(None, description='The result code.')
